// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: my_protobuf.proto

#include "my_protobuf.pb.h"
#include "my_protobuf.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace my_protobuf {

static const char* transactionTest_method_names[] = {
  "/my_protobuf.transactionTest/IimageOimage",
  "/my_protobuf.transactionTest/ItextOtext",
  "/my_protobuf.transactionTest/IjsonOjson",
  "/my_protobuf.transactionTest/IReqITORepIT",
};

std::unique_ptr< transactionTest::Stub> transactionTest::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< transactionTest::Stub> stub(new transactionTest::Stub(channel));
  return stub;
}

transactionTest::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_IimageOimage_(transactionTest_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ItextOtext_(transactionTest_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IjsonOjson_(transactionTest_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IReqITORepIT_(transactionTest_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status transactionTest::Stub::IimageOimage(::grpc::ClientContext* context, const ::my_protobuf::ImageType& request, ::my_protobuf::ImageType* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_IimageOimage_, context, request, response);
}

void transactionTest::Stub::experimental_async::IimageOimage(::grpc::ClientContext* context, const ::my_protobuf::ImageType* request, ::my_protobuf::ImageType* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_IimageOimage_, context, request, response, std::move(f));
}

void transactionTest::Stub::experimental_async::IimageOimage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::my_protobuf::ImageType* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_IimageOimage_, context, request, response, std::move(f));
}

void transactionTest::Stub::experimental_async::IimageOimage(::grpc::ClientContext* context, const ::my_protobuf::ImageType* request, ::my_protobuf::ImageType* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_IimageOimage_, context, request, response, reactor);
}

void transactionTest::Stub::experimental_async::IimageOimage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::my_protobuf::ImageType* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_IimageOimage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::my_protobuf::ImageType>* transactionTest::Stub::AsyncIimageOimageRaw(::grpc::ClientContext* context, const ::my_protobuf::ImageType& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::my_protobuf::ImageType>::Create(channel_.get(), cq, rpcmethod_IimageOimage_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::my_protobuf::ImageType>* transactionTest::Stub::PrepareAsyncIimageOimageRaw(::grpc::ClientContext* context, const ::my_protobuf::ImageType& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::my_protobuf::ImageType>::Create(channel_.get(), cq, rpcmethod_IimageOimage_, context, request, false);
}

::grpc::Status transactionTest::Stub::ItextOtext(::grpc::ClientContext* context, const ::my_protobuf::TextType& request, ::my_protobuf::TextType* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ItextOtext_, context, request, response);
}

void transactionTest::Stub::experimental_async::ItextOtext(::grpc::ClientContext* context, const ::my_protobuf::TextType* request, ::my_protobuf::TextType* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ItextOtext_, context, request, response, std::move(f));
}

void transactionTest::Stub::experimental_async::ItextOtext(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::my_protobuf::TextType* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ItextOtext_, context, request, response, std::move(f));
}

void transactionTest::Stub::experimental_async::ItextOtext(::grpc::ClientContext* context, const ::my_protobuf::TextType* request, ::my_protobuf::TextType* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ItextOtext_, context, request, response, reactor);
}

void transactionTest::Stub::experimental_async::ItextOtext(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::my_protobuf::TextType* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ItextOtext_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::my_protobuf::TextType>* transactionTest::Stub::AsyncItextOtextRaw(::grpc::ClientContext* context, const ::my_protobuf::TextType& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::my_protobuf::TextType>::Create(channel_.get(), cq, rpcmethod_ItextOtext_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::my_protobuf::TextType>* transactionTest::Stub::PrepareAsyncItextOtextRaw(::grpc::ClientContext* context, const ::my_protobuf::TextType& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::my_protobuf::TextType>::Create(channel_.get(), cq, rpcmethod_ItextOtext_, context, request, false);
}

::grpc::Status transactionTest::Stub::IjsonOjson(::grpc::ClientContext* context, const ::my_protobuf::JSONType& request, ::my_protobuf::JSONType* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_IjsonOjson_, context, request, response);
}

void transactionTest::Stub::experimental_async::IjsonOjson(::grpc::ClientContext* context, const ::my_protobuf::JSONType* request, ::my_protobuf::JSONType* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_IjsonOjson_, context, request, response, std::move(f));
}

void transactionTest::Stub::experimental_async::IjsonOjson(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::my_protobuf::JSONType* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_IjsonOjson_, context, request, response, std::move(f));
}

void transactionTest::Stub::experimental_async::IjsonOjson(::grpc::ClientContext* context, const ::my_protobuf::JSONType* request, ::my_protobuf::JSONType* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_IjsonOjson_, context, request, response, reactor);
}

void transactionTest::Stub::experimental_async::IjsonOjson(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::my_protobuf::JSONType* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_IjsonOjson_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::my_protobuf::JSONType>* transactionTest::Stub::AsyncIjsonOjsonRaw(::grpc::ClientContext* context, const ::my_protobuf::JSONType& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::my_protobuf::JSONType>::Create(channel_.get(), cq, rpcmethod_IjsonOjson_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::my_protobuf::JSONType>* transactionTest::Stub::PrepareAsyncIjsonOjsonRaw(::grpc::ClientContext* context, const ::my_protobuf::JSONType& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::my_protobuf::JSONType>::Create(channel_.get(), cq, rpcmethod_IjsonOjson_, context, request, false);
}

::grpc::Status transactionTest::Stub::IReqITORepIT(::grpc::ClientContext* context, const ::my_protobuf::RequestImageType& request, ::my_protobuf::ReplyImageType* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_IReqITORepIT_, context, request, response);
}

void transactionTest::Stub::experimental_async::IReqITORepIT(::grpc::ClientContext* context, const ::my_protobuf::RequestImageType* request, ::my_protobuf::ReplyImageType* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_IReqITORepIT_, context, request, response, std::move(f));
}

void transactionTest::Stub::experimental_async::IReqITORepIT(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::my_protobuf::ReplyImageType* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_IReqITORepIT_, context, request, response, std::move(f));
}

void transactionTest::Stub::experimental_async::IReqITORepIT(::grpc::ClientContext* context, const ::my_protobuf::RequestImageType* request, ::my_protobuf::ReplyImageType* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_IReqITORepIT_, context, request, response, reactor);
}

void transactionTest::Stub::experimental_async::IReqITORepIT(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::my_protobuf::ReplyImageType* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_IReqITORepIT_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::my_protobuf::ReplyImageType>* transactionTest::Stub::AsyncIReqITORepITRaw(::grpc::ClientContext* context, const ::my_protobuf::RequestImageType& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::my_protobuf::ReplyImageType>::Create(channel_.get(), cq, rpcmethod_IReqITORepIT_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::my_protobuf::ReplyImageType>* transactionTest::Stub::PrepareAsyncIReqITORepITRaw(::grpc::ClientContext* context, const ::my_protobuf::RequestImageType& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::my_protobuf::ReplyImageType>::Create(channel_.get(), cq, rpcmethod_IReqITORepIT_, context, request, false);
}

transactionTest::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      transactionTest_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< transactionTest::Service, ::my_protobuf::ImageType, ::my_protobuf::ImageType>(
          [](transactionTest::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::my_protobuf::ImageType* req,
             ::my_protobuf::ImageType* resp) {
               return service->IimageOimage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      transactionTest_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< transactionTest::Service, ::my_protobuf::TextType, ::my_protobuf::TextType>(
          [](transactionTest::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::my_protobuf::TextType* req,
             ::my_protobuf::TextType* resp) {
               return service->ItextOtext(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      transactionTest_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< transactionTest::Service, ::my_protobuf::JSONType, ::my_protobuf::JSONType>(
          [](transactionTest::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::my_protobuf::JSONType* req,
             ::my_protobuf::JSONType* resp) {
               return service->IjsonOjson(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      transactionTest_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< transactionTest::Service, ::my_protobuf::RequestImageType, ::my_protobuf::ReplyImageType>(
          [](transactionTest::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::my_protobuf::RequestImageType* req,
             ::my_protobuf::ReplyImageType* resp) {
               return service->IReqITORepIT(ctx, req, resp);
             }, this)));
}

transactionTest::Service::~Service() {
}

::grpc::Status transactionTest::Service::IimageOimage(::grpc::ServerContext* context, const ::my_protobuf::ImageType* request, ::my_protobuf::ImageType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status transactionTest::Service::ItextOtext(::grpc::ServerContext* context, const ::my_protobuf::TextType* request, ::my_protobuf::TextType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status transactionTest::Service::IjsonOjson(::grpc::ServerContext* context, const ::my_protobuf::JSONType* request, ::my_protobuf::JSONType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status transactionTest::Service::IReqITORepIT(::grpc::ServerContext* context, const ::my_protobuf::RequestImageType* request, ::my_protobuf::ReplyImageType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace my_protobuf

