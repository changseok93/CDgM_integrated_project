// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: my_protobuf.proto
#ifndef GRPC_my_5fprotobuf_2eproto__INCLUDED
#define GRPC_my_5fprotobuf_2eproto__INCLUDED

#include "my_protobuf.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace my_protobuf {

class transactionTest final {
 public:
  static constexpr char const* service_full_name() {
    return "my_protobuf.transactionTest";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status IimageOimage(::grpc::ClientContext* context, const ::my_protobuf::ImageType& request, ::my_protobuf::ImageType* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::my_protobuf::ImageType>> AsyncIimageOimage(::grpc::ClientContext* context, const ::my_protobuf::ImageType& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::my_protobuf::ImageType>>(AsyncIimageOimageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::my_protobuf::ImageType>> PrepareAsyncIimageOimage(::grpc::ClientContext* context, const ::my_protobuf::ImageType& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::my_protobuf::ImageType>>(PrepareAsyncIimageOimageRaw(context, request, cq));
    }
    virtual ::grpc::Status ItextOtext(::grpc::ClientContext* context, const ::my_protobuf::TextType& request, ::my_protobuf::TextType* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::my_protobuf::TextType>> AsyncItextOtext(::grpc::ClientContext* context, const ::my_protobuf::TextType& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::my_protobuf::TextType>>(AsyncItextOtextRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::my_protobuf::TextType>> PrepareAsyncItextOtext(::grpc::ClientContext* context, const ::my_protobuf::TextType& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::my_protobuf::TextType>>(PrepareAsyncItextOtextRaw(context, request, cq));
    }
    virtual ::grpc::Status IjsonOjson(::grpc::ClientContext* context, const ::my_protobuf::JSONType& request, ::my_protobuf::JSONType* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::my_protobuf::JSONType>> AsyncIjsonOjson(::grpc::ClientContext* context, const ::my_protobuf::JSONType& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::my_protobuf::JSONType>>(AsyncIjsonOjsonRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::my_protobuf::JSONType>> PrepareAsyncIjsonOjson(::grpc::ClientContext* context, const ::my_protobuf::JSONType& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::my_protobuf::JSONType>>(PrepareAsyncIjsonOjsonRaw(context, request, cq));
    }
    virtual ::grpc::Status IReqITORepIT(::grpc::ClientContext* context, const ::my_protobuf::RequestImageType& request, ::my_protobuf::ReplyImageType* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::my_protobuf::ReplyImageType>> AsyncIReqITORepIT(::grpc::ClientContext* context, const ::my_protobuf::RequestImageType& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::my_protobuf::ReplyImageType>>(AsyncIReqITORepITRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::my_protobuf::ReplyImageType>> PrepareAsyncIReqITORepIT(::grpc::ClientContext* context, const ::my_protobuf::RequestImageType& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::my_protobuf::ReplyImageType>>(PrepareAsyncIReqITORepITRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void IimageOimage(::grpc::ClientContext* context, const ::my_protobuf::ImageType* request, ::my_protobuf::ImageType* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IimageOimage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::my_protobuf::ImageType* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void IimageOimage(::grpc::ClientContext* context, const ::my_protobuf::ImageType* request, ::my_protobuf::ImageType* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void IimageOimage(::grpc::ClientContext* context, const ::my_protobuf::ImageType* request, ::my_protobuf::ImageType* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void IimageOimage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::my_protobuf::ImageType* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void IimageOimage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::my_protobuf::ImageType* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ItextOtext(::grpc::ClientContext* context, const ::my_protobuf::TextType* request, ::my_protobuf::TextType* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ItextOtext(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::my_protobuf::TextType* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ItextOtext(::grpc::ClientContext* context, const ::my_protobuf::TextType* request, ::my_protobuf::TextType* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ItextOtext(::grpc::ClientContext* context, const ::my_protobuf::TextType* request, ::my_protobuf::TextType* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ItextOtext(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::my_protobuf::TextType* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ItextOtext(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::my_protobuf::TextType* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void IjsonOjson(::grpc::ClientContext* context, const ::my_protobuf::JSONType* request, ::my_protobuf::JSONType* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IjsonOjson(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::my_protobuf::JSONType* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void IjsonOjson(::grpc::ClientContext* context, const ::my_protobuf::JSONType* request, ::my_protobuf::JSONType* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void IjsonOjson(::grpc::ClientContext* context, const ::my_protobuf::JSONType* request, ::my_protobuf::JSONType* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void IjsonOjson(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::my_protobuf::JSONType* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void IjsonOjson(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::my_protobuf::JSONType* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void IReqITORepIT(::grpc::ClientContext* context, const ::my_protobuf::RequestImageType* request, ::my_protobuf::ReplyImageType* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IReqITORepIT(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::my_protobuf::ReplyImageType* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void IReqITORepIT(::grpc::ClientContext* context, const ::my_protobuf::RequestImageType* request, ::my_protobuf::ReplyImageType* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void IReqITORepIT(::grpc::ClientContext* context, const ::my_protobuf::RequestImageType* request, ::my_protobuf::ReplyImageType* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void IReqITORepIT(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::my_protobuf::ReplyImageType* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void IReqITORepIT(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::my_protobuf::ReplyImageType* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::my_protobuf::ImageType>* AsyncIimageOimageRaw(::grpc::ClientContext* context, const ::my_protobuf::ImageType& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::my_protobuf::ImageType>* PrepareAsyncIimageOimageRaw(::grpc::ClientContext* context, const ::my_protobuf::ImageType& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::my_protobuf::TextType>* AsyncItextOtextRaw(::grpc::ClientContext* context, const ::my_protobuf::TextType& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::my_protobuf::TextType>* PrepareAsyncItextOtextRaw(::grpc::ClientContext* context, const ::my_protobuf::TextType& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::my_protobuf::JSONType>* AsyncIjsonOjsonRaw(::grpc::ClientContext* context, const ::my_protobuf::JSONType& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::my_protobuf::JSONType>* PrepareAsyncIjsonOjsonRaw(::grpc::ClientContext* context, const ::my_protobuf::JSONType& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::my_protobuf::ReplyImageType>* AsyncIReqITORepITRaw(::grpc::ClientContext* context, const ::my_protobuf::RequestImageType& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::my_protobuf::ReplyImageType>* PrepareAsyncIReqITORepITRaw(::grpc::ClientContext* context, const ::my_protobuf::RequestImageType& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status IimageOimage(::grpc::ClientContext* context, const ::my_protobuf::ImageType& request, ::my_protobuf::ImageType* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::my_protobuf::ImageType>> AsyncIimageOimage(::grpc::ClientContext* context, const ::my_protobuf::ImageType& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::my_protobuf::ImageType>>(AsyncIimageOimageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::my_protobuf::ImageType>> PrepareAsyncIimageOimage(::grpc::ClientContext* context, const ::my_protobuf::ImageType& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::my_protobuf::ImageType>>(PrepareAsyncIimageOimageRaw(context, request, cq));
    }
    ::grpc::Status ItextOtext(::grpc::ClientContext* context, const ::my_protobuf::TextType& request, ::my_protobuf::TextType* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::my_protobuf::TextType>> AsyncItextOtext(::grpc::ClientContext* context, const ::my_protobuf::TextType& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::my_protobuf::TextType>>(AsyncItextOtextRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::my_protobuf::TextType>> PrepareAsyncItextOtext(::grpc::ClientContext* context, const ::my_protobuf::TextType& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::my_protobuf::TextType>>(PrepareAsyncItextOtextRaw(context, request, cq));
    }
    ::grpc::Status IjsonOjson(::grpc::ClientContext* context, const ::my_protobuf::JSONType& request, ::my_protobuf::JSONType* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::my_protobuf::JSONType>> AsyncIjsonOjson(::grpc::ClientContext* context, const ::my_protobuf::JSONType& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::my_protobuf::JSONType>>(AsyncIjsonOjsonRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::my_protobuf::JSONType>> PrepareAsyncIjsonOjson(::grpc::ClientContext* context, const ::my_protobuf::JSONType& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::my_protobuf::JSONType>>(PrepareAsyncIjsonOjsonRaw(context, request, cq));
    }
    ::grpc::Status IReqITORepIT(::grpc::ClientContext* context, const ::my_protobuf::RequestImageType& request, ::my_protobuf::ReplyImageType* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::my_protobuf::ReplyImageType>> AsyncIReqITORepIT(::grpc::ClientContext* context, const ::my_protobuf::RequestImageType& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::my_protobuf::ReplyImageType>>(AsyncIReqITORepITRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::my_protobuf::ReplyImageType>> PrepareAsyncIReqITORepIT(::grpc::ClientContext* context, const ::my_protobuf::RequestImageType& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::my_protobuf::ReplyImageType>>(PrepareAsyncIReqITORepITRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void IimageOimage(::grpc::ClientContext* context, const ::my_protobuf::ImageType* request, ::my_protobuf::ImageType* response, std::function<void(::grpc::Status)>) override;
      void IimageOimage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::my_protobuf::ImageType* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void IimageOimage(::grpc::ClientContext* context, const ::my_protobuf::ImageType* request, ::my_protobuf::ImageType* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void IimageOimage(::grpc::ClientContext* context, const ::my_protobuf::ImageType* request, ::my_protobuf::ImageType* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void IimageOimage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::my_protobuf::ImageType* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void IimageOimage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::my_protobuf::ImageType* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ItextOtext(::grpc::ClientContext* context, const ::my_protobuf::TextType* request, ::my_protobuf::TextType* response, std::function<void(::grpc::Status)>) override;
      void ItextOtext(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::my_protobuf::TextType* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ItextOtext(::grpc::ClientContext* context, const ::my_protobuf::TextType* request, ::my_protobuf::TextType* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ItextOtext(::grpc::ClientContext* context, const ::my_protobuf::TextType* request, ::my_protobuf::TextType* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ItextOtext(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::my_protobuf::TextType* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ItextOtext(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::my_protobuf::TextType* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void IjsonOjson(::grpc::ClientContext* context, const ::my_protobuf::JSONType* request, ::my_protobuf::JSONType* response, std::function<void(::grpc::Status)>) override;
      void IjsonOjson(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::my_protobuf::JSONType* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void IjsonOjson(::grpc::ClientContext* context, const ::my_protobuf::JSONType* request, ::my_protobuf::JSONType* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void IjsonOjson(::grpc::ClientContext* context, const ::my_protobuf::JSONType* request, ::my_protobuf::JSONType* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void IjsonOjson(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::my_protobuf::JSONType* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void IjsonOjson(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::my_protobuf::JSONType* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void IReqITORepIT(::grpc::ClientContext* context, const ::my_protobuf::RequestImageType* request, ::my_protobuf::ReplyImageType* response, std::function<void(::grpc::Status)>) override;
      void IReqITORepIT(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::my_protobuf::ReplyImageType* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void IReqITORepIT(::grpc::ClientContext* context, const ::my_protobuf::RequestImageType* request, ::my_protobuf::ReplyImageType* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void IReqITORepIT(::grpc::ClientContext* context, const ::my_protobuf::RequestImageType* request, ::my_protobuf::ReplyImageType* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void IReqITORepIT(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::my_protobuf::ReplyImageType* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void IReqITORepIT(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::my_protobuf::ReplyImageType* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::my_protobuf::ImageType>* AsyncIimageOimageRaw(::grpc::ClientContext* context, const ::my_protobuf::ImageType& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::my_protobuf::ImageType>* PrepareAsyncIimageOimageRaw(::grpc::ClientContext* context, const ::my_protobuf::ImageType& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::my_protobuf::TextType>* AsyncItextOtextRaw(::grpc::ClientContext* context, const ::my_protobuf::TextType& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::my_protobuf::TextType>* PrepareAsyncItextOtextRaw(::grpc::ClientContext* context, const ::my_protobuf::TextType& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::my_protobuf::JSONType>* AsyncIjsonOjsonRaw(::grpc::ClientContext* context, const ::my_protobuf::JSONType& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::my_protobuf::JSONType>* PrepareAsyncIjsonOjsonRaw(::grpc::ClientContext* context, const ::my_protobuf::JSONType& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::my_protobuf::ReplyImageType>* AsyncIReqITORepITRaw(::grpc::ClientContext* context, const ::my_protobuf::RequestImageType& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::my_protobuf::ReplyImageType>* PrepareAsyncIReqITORepITRaw(::grpc::ClientContext* context, const ::my_protobuf::RequestImageType& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_IimageOimage_;
    const ::grpc::internal::RpcMethod rpcmethod_ItextOtext_;
    const ::grpc::internal::RpcMethod rpcmethod_IjsonOjson_;
    const ::grpc::internal::RpcMethod rpcmethod_IReqITORepIT_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status IimageOimage(::grpc::ServerContext* context, const ::my_protobuf::ImageType* request, ::my_protobuf::ImageType* response);
    virtual ::grpc::Status ItextOtext(::grpc::ServerContext* context, const ::my_protobuf::TextType* request, ::my_protobuf::TextType* response);
    virtual ::grpc::Status IjsonOjson(::grpc::ServerContext* context, const ::my_protobuf::JSONType* request, ::my_protobuf::JSONType* response);
    virtual ::grpc::Status IReqITORepIT(::grpc::ServerContext* context, const ::my_protobuf::RequestImageType* request, ::my_protobuf::ReplyImageType* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_IimageOimage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IimageOimage() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_IimageOimage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IimageOimage(::grpc::ServerContext* /*context*/, const ::my_protobuf::ImageType* /*request*/, ::my_protobuf::ImageType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIimageOimage(::grpc::ServerContext* context, ::my_protobuf::ImageType* request, ::grpc::ServerAsyncResponseWriter< ::my_protobuf::ImageType>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ItextOtext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ItextOtext() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ItextOtext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ItextOtext(::grpc::ServerContext* /*context*/, const ::my_protobuf::TextType* /*request*/, ::my_protobuf::TextType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestItextOtext(::grpc::ServerContext* context, ::my_protobuf::TextType* request, ::grpc::ServerAsyncResponseWriter< ::my_protobuf::TextType>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IjsonOjson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IjsonOjson() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_IjsonOjson() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IjsonOjson(::grpc::ServerContext* /*context*/, const ::my_protobuf::JSONType* /*request*/, ::my_protobuf::JSONType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIjsonOjson(::grpc::ServerContext* context, ::my_protobuf::JSONType* request, ::grpc::ServerAsyncResponseWriter< ::my_protobuf::JSONType>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IReqITORepIT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IReqITORepIT() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_IReqITORepIT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IReqITORepIT(::grpc::ServerContext* /*context*/, const ::my_protobuf::RequestImageType* /*request*/, ::my_protobuf::ReplyImageType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIReqITORepIT(::grpc::ServerContext* context, ::my_protobuf::RequestImageType* request, ::grpc::ServerAsyncResponseWriter< ::my_protobuf::ReplyImageType>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_IimageOimage<WithAsyncMethod_ItextOtext<WithAsyncMethod_IjsonOjson<WithAsyncMethod_IReqITORepIT<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_IimageOimage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_IimageOimage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::my_protobuf::ImageType, ::my_protobuf::ImageType>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::my_protobuf::ImageType* request, ::my_protobuf::ImageType* response) { return this->IimageOimage(context, request, response); }));}
    void SetMessageAllocatorFor_IimageOimage(
        ::grpc::experimental::MessageAllocator< ::my_protobuf::ImageType, ::my_protobuf::ImageType>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::my_protobuf::ImageType, ::my_protobuf::ImageType>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_IimageOimage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IimageOimage(::grpc::ServerContext* /*context*/, const ::my_protobuf::ImageType* /*request*/, ::my_protobuf::ImageType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* IimageOimage(
      ::grpc::CallbackServerContext* /*context*/, const ::my_protobuf::ImageType* /*request*/, ::my_protobuf::ImageType* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* IimageOimage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::my_protobuf::ImageType* /*request*/, ::my_protobuf::ImageType* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ItextOtext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ItextOtext() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::my_protobuf::TextType, ::my_protobuf::TextType>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::my_protobuf::TextType* request, ::my_protobuf::TextType* response) { return this->ItextOtext(context, request, response); }));}
    void SetMessageAllocatorFor_ItextOtext(
        ::grpc::experimental::MessageAllocator< ::my_protobuf::TextType, ::my_protobuf::TextType>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::my_protobuf::TextType, ::my_protobuf::TextType>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ItextOtext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ItextOtext(::grpc::ServerContext* /*context*/, const ::my_protobuf::TextType* /*request*/, ::my_protobuf::TextType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ItextOtext(
      ::grpc::CallbackServerContext* /*context*/, const ::my_protobuf::TextType* /*request*/, ::my_protobuf::TextType* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ItextOtext(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::my_protobuf::TextType* /*request*/, ::my_protobuf::TextType* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_IjsonOjson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_IjsonOjson() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::my_protobuf::JSONType, ::my_protobuf::JSONType>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::my_protobuf::JSONType* request, ::my_protobuf::JSONType* response) { return this->IjsonOjson(context, request, response); }));}
    void SetMessageAllocatorFor_IjsonOjson(
        ::grpc::experimental::MessageAllocator< ::my_protobuf::JSONType, ::my_protobuf::JSONType>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::my_protobuf::JSONType, ::my_protobuf::JSONType>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_IjsonOjson() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IjsonOjson(::grpc::ServerContext* /*context*/, const ::my_protobuf::JSONType* /*request*/, ::my_protobuf::JSONType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* IjsonOjson(
      ::grpc::CallbackServerContext* /*context*/, const ::my_protobuf::JSONType* /*request*/, ::my_protobuf::JSONType* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* IjsonOjson(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::my_protobuf::JSONType* /*request*/, ::my_protobuf::JSONType* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_IReqITORepIT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_IReqITORepIT() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::my_protobuf::RequestImageType, ::my_protobuf::ReplyImageType>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::my_protobuf::RequestImageType* request, ::my_protobuf::ReplyImageType* response) { return this->IReqITORepIT(context, request, response); }));}
    void SetMessageAllocatorFor_IReqITORepIT(
        ::grpc::experimental::MessageAllocator< ::my_protobuf::RequestImageType, ::my_protobuf::ReplyImageType>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::my_protobuf::RequestImageType, ::my_protobuf::ReplyImageType>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_IReqITORepIT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IReqITORepIT(::grpc::ServerContext* /*context*/, const ::my_protobuf::RequestImageType* /*request*/, ::my_protobuf::ReplyImageType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* IReqITORepIT(
      ::grpc::CallbackServerContext* /*context*/, const ::my_protobuf::RequestImageType* /*request*/, ::my_protobuf::ReplyImageType* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* IReqITORepIT(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::my_protobuf::RequestImageType* /*request*/, ::my_protobuf::ReplyImageType* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_IimageOimage<ExperimentalWithCallbackMethod_ItextOtext<ExperimentalWithCallbackMethod_IjsonOjson<ExperimentalWithCallbackMethod_IReqITORepIT<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_IimageOimage<ExperimentalWithCallbackMethod_ItextOtext<ExperimentalWithCallbackMethod_IjsonOjson<ExperimentalWithCallbackMethod_IReqITORepIT<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_IimageOimage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IimageOimage() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_IimageOimage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IimageOimage(::grpc::ServerContext* /*context*/, const ::my_protobuf::ImageType* /*request*/, ::my_protobuf::ImageType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ItextOtext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ItextOtext() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ItextOtext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ItextOtext(::grpc::ServerContext* /*context*/, const ::my_protobuf::TextType* /*request*/, ::my_protobuf::TextType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IjsonOjson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IjsonOjson() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_IjsonOjson() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IjsonOjson(::grpc::ServerContext* /*context*/, const ::my_protobuf::JSONType* /*request*/, ::my_protobuf::JSONType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IReqITORepIT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IReqITORepIT() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_IReqITORepIT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IReqITORepIT(::grpc::ServerContext* /*context*/, const ::my_protobuf::RequestImageType* /*request*/, ::my_protobuf::ReplyImageType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_IimageOimage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IimageOimage() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_IimageOimage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IimageOimage(::grpc::ServerContext* /*context*/, const ::my_protobuf::ImageType* /*request*/, ::my_protobuf::ImageType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIimageOimage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ItextOtext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ItextOtext() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ItextOtext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ItextOtext(::grpc::ServerContext* /*context*/, const ::my_protobuf::TextType* /*request*/, ::my_protobuf::TextType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestItextOtext(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IjsonOjson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IjsonOjson() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_IjsonOjson() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IjsonOjson(::grpc::ServerContext* /*context*/, const ::my_protobuf::JSONType* /*request*/, ::my_protobuf::JSONType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIjsonOjson(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IReqITORepIT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IReqITORepIT() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_IReqITORepIT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IReqITORepIT(::grpc::ServerContext* /*context*/, const ::my_protobuf::RequestImageType* /*request*/, ::my_protobuf::ReplyImageType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIReqITORepIT(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_IimageOimage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_IimageOimage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->IimageOimage(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_IimageOimage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IimageOimage(::grpc::ServerContext* /*context*/, const ::my_protobuf::ImageType* /*request*/, ::my_protobuf::ImageType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* IimageOimage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* IimageOimage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ItextOtext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ItextOtext() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ItextOtext(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ItextOtext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ItextOtext(::grpc::ServerContext* /*context*/, const ::my_protobuf::TextType* /*request*/, ::my_protobuf::TextType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ItextOtext(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ItextOtext(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_IjsonOjson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_IjsonOjson() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->IjsonOjson(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_IjsonOjson() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IjsonOjson(::grpc::ServerContext* /*context*/, const ::my_protobuf::JSONType* /*request*/, ::my_protobuf::JSONType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* IjsonOjson(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* IjsonOjson(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_IReqITORepIT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_IReqITORepIT() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->IReqITORepIT(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_IReqITORepIT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IReqITORepIT(::grpc::ServerContext* /*context*/, const ::my_protobuf::RequestImageType* /*request*/, ::my_protobuf::ReplyImageType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* IReqITORepIT(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* IReqITORepIT(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IimageOimage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IimageOimage() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::my_protobuf::ImageType, ::my_protobuf::ImageType>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::my_protobuf::ImageType, ::my_protobuf::ImageType>* streamer) {
                       return this->StreamedIimageOimage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_IimageOimage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IimageOimage(::grpc::ServerContext* /*context*/, const ::my_protobuf::ImageType* /*request*/, ::my_protobuf::ImageType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIimageOimage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::my_protobuf::ImageType,::my_protobuf::ImageType>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ItextOtext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ItextOtext() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::my_protobuf::TextType, ::my_protobuf::TextType>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::my_protobuf::TextType, ::my_protobuf::TextType>* streamer) {
                       return this->StreamedItextOtext(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ItextOtext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ItextOtext(::grpc::ServerContext* /*context*/, const ::my_protobuf::TextType* /*request*/, ::my_protobuf::TextType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedItextOtext(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::my_protobuf::TextType,::my_protobuf::TextType>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IjsonOjson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IjsonOjson() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::my_protobuf::JSONType, ::my_protobuf::JSONType>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::my_protobuf::JSONType, ::my_protobuf::JSONType>* streamer) {
                       return this->StreamedIjsonOjson(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_IjsonOjson() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IjsonOjson(::grpc::ServerContext* /*context*/, const ::my_protobuf::JSONType* /*request*/, ::my_protobuf::JSONType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIjsonOjson(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::my_protobuf::JSONType,::my_protobuf::JSONType>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IReqITORepIT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IReqITORepIT() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::my_protobuf::RequestImageType, ::my_protobuf::ReplyImageType>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::my_protobuf::RequestImageType, ::my_protobuf::ReplyImageType>* streamer) {
                       return this->StreamedIReqITORepIT(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_IReqITORepIT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IReqITORepIT(::grpc::ServerContext* /*context*/, const ::my_protobuf::RequestImageType* /*request*/, ::my_protobuf::ReplyImageType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIReqITORepIT(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::my_protobuf::RequestImageType,::my_protobuf::ReplyImageType>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_IimageOimage<WithStreamedUnaryMethod_ItextOtext<WithStreamedUnaryMethod_IjsonOjson<WithStreamedUnaryMethod_IReqITORepIT<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_IimageOimage<WithStreamedUnaryMethod_ItextOtext<WithStreamedUnaryMethod_IjsonOjson<WithStreamedUnaryMethod_IReqITORepIT<Service > > > > StreamedService;
};

}  // namespace my_protobuf


#endif  // GRPC_my_5fprotobuf_2eproto__INCLUDED
